<?php
/**
 * WordPress PHPUnity Test Runner: Report script
 *
 * This script is responsible for collecting details related to the testing
 * environment and the outcome of the test suite before reporting the data
 * through the configured Reporter API.
 *
 * The information gathered includes:
 * - SVN revision,
 * - Environment details.
 * - Test outcomes.
 *
 * @link https://github.com/wordpress/phpunit-test-runner/ Original source repository
 *
 * @package WordPress
 */
require __DIR__ . '/functions.php';

/*
 * Check for the presence of required environment variables.
 *
 * This function should be defined in functions.php and should throw an
 * exception or exit if any required variables are missing.
 */
check_required_env( false );

/*
 * Retrieve environment variables falling back to defaults.
 *
 * These variables are used to configure SSH connections, file paths, and
 * executable commands needed for setting up the test environment.
 */
$WPT_SSH_CONNECT    = trim( getenv( 'WPT_SSH_CONNECT' ) );
$WPT_TEST_DIR       = trim( getenv( 'WPT_TEST_DIR' ) );
$WPT_PREPARE_DIR    = trim( getenv( 'WPT_PREPARE_DIR' ) );
$WPT_SSH_OPTIONS    = trim( getenv( 'WPT_SSH_OPTIONS' ) );
$WPT_REPORT_API_KEY = trim( getenv( 'WPT_REPORT_API_KEY' ) );

// Configure debug mode based on the WPT_DEBUG environment variable.
$WPT_DEBUG_INI = getenv( 'WPT_DEBUG' );
switch( $WPT_DEBUG_INI ) {
	case 0:
	case 'false':
		$WPT_DEBUG = false;
		break;
	case 1:
	case 'true':
	case 'verbose':
		$WPT_DEBUG = 'verbose';
		break;
	default:
		$WPT_DEBUG = false;
		break;
}
unset( $WPT_DEBUG_INI );

/*
 * Retrieve the SVN revision number from the repository's Git log.
 *
 * The SVN revision number is extracted from the retrieves the latest commit
 * message using a combination of grep and cut commands.
 */
log_message('Getting SVN Revision');
$rev = exec('git --git-dir=' . escapeshellarg( $WPT_PREPARE_DIR ) . '/.git log -1 --pretty=%B | grep "git-svn-id:" | cut -d " " -f 2 | cut -d "@" -f 2');

/*
 * Retrieve the SVN commit message from the repository's Git log.
 *
 * The `git log` command is used to fetch the commit message being tested.
 */
log_message('Getting SVN message');
$message = trim( exec('git --git-dir=' . escapeshellarg( $WPT_PREPARE_DIR ) . '/.git log -1 --pretty=%B | head -1') );

// Construct the file path for copying the junit.xml results.
log_message('Copying junit.xml results');
$junit_location = escapeshellarg( $WPT_TEST_DIR ) . '/tests/phpunit/build/logs/*';

// Modify the junit.xml file path when an SSH connection is configured.
if ( ! empty( $WPT_SSH_CONNECT ) ) {
	$junit_location = '-e "ssh ' . $WPT_SSH_OPTIONS . '" ' . escapeshellarg( $WPT_SSH_CONNECT . ':' . $junit_location );
}

// Construct the rsync command for synchronizing the junit.xml file.
$rsync_options = '-r';

if ( 'verbose' === $WPT_DEBUG ) {
	$rsync_options = $rsync_options . 'v';
}
$junit_exec = 'rsync ' . $rsync_options . ' ' . $junit_location . ' ' . escapeshellarg( $WPT_PREPARE_DIR );

// Copy the junit.xml file from the test directory to the prepare directory.
perform_operations( array(
	$junit_exec,
) );

// Process the junit.xml file.
log_message( 'Processing and uploading junit.xml' );
$xml = file_get_contents( $WPT_PREPARE_DIR . '/junit.xml' );
$results = process_junit_xml( $xml );

/*
 * Retrieves environment details from a JSON file or generates them if not available.
 * Initializes the environment details string. If an 'env.json' file exists in the prepared
 * directory, its contents are read into the environment details string. If the file doesn't
 * exist but the prepared directory is the same as the test directory, the environment details
 * are generated by calling a function that retrieves these details, then encoded into JSON format.
 */
$env = '';
if ( file_exists( $WPT_PREPARE_DIR . '/env.json' ) ) {
	$env = file_get_contents( $WPT_PREPARE_DIR . '/env.json' );
} elseif ( $WPT_PREPARE_DIR === $WPT_TEST_DIR ) {
	$env = json_encode( get_env_details(), JSON_PRETTY_PRINT );
}

/*
 * Submit the test results to the configured Test Reporter API.
 *
 * When an API key is provided, the results will be submitted to the configured
 * Test Reporter API.
 *
 * Otherwise, the test results will be logged locally.
 */
if( ! empty( $WPT_REPORT_API_KEY ) ) {

	// Upload the results and capture the HTTP status and response body
	list( $http_status, $response_body ) = upload_results( $results, $rev, $message, $env, $WPT_REPORT_API_KEY );

	// Decode the JSON response body
	$response = json_decode( $response_body, true );
	if ( 20 == substr( $http_status, 0, 2 ) ) {

		// Construct and log a success message with a link if provided in the response
		$message = 'Results successfully uploaded';
		$message .= isset( $response['link'] ) ? ': ' . $response['link'] : '';
		log_message( $message );

	} else {

		// Construct and log an error message with additional details if provided in the response
		$message = 'Error uploading results';
		$message .= isset( $response['message'] ) ? ': ' . $response['message'] : '';
		$message .= ' (HTTP status ' . (int) $http_status . ')';
		error_message( $message );

	}

} else {

	// Log the test results and environment details locally if no API key is provided
	log_message( '[+] TEST RESULTS' . "\n\n" . $results. "\n\n" );
	log_message( '[+] ENVIRONMENT' . "\n\n" . $env . "\n\n" );

}
